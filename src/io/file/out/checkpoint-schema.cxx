// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "checkpoint-schema.hxx"

// ParticleSetType
// 

const ParticleSetType::particle_type& ParticleSetType::
particle () const
{
  return this->particle_.get ();
}

ParticleSetType::particle_type& ParticleSetType::
particle ()
{
  return this->particle_.get ();
}

void ParticleSetType::
particle (const particle_type& x)
{
  this->particle_.set (x);
}

void ParticleSetType::
particle (::std::auto_ptr< particle_type > x)
{
  this->particle_.set (x);
}


// ParticleType
// 

const ParticleType::Position_type& ParticleType::
Position () const
{
  return this->Position_.get ();
}

ParticleType::Position_type& ParticleType::
Position ()
{
  return this->Position_.get ();
}

void ParticleType::
Position (const Position_type& x)
{
  this->Position_.set (x);
}

void ParticleType::
Position (::std::auto_ptr< Position_type > x)
{
  this->Position_.set (x);
}

const ParticleType::Velocity_type& ParticleType::
Velocity () const
{
  return this->Velocity_.get ();
}

ParticleType::Velocity_type& ParticleType::
Velocity ()
{
  return this->Velocity_.get ();
}

void ParticleType::
Velocity (const Velocity_type& x)
{
  this->Velocity_.set (x);
}

void ParticleType::
Velocity (::std::auto_ptr< Velocity_type > x)
{
  this->Velocity_.set (x);
}

const ParticleType::Force_type& ParticleType::
Force () const
{
  return this->Force_.get ();
}

ParticleType::Force_type& ParticleType::
Force ()
{
  return this->Force_.get ();
}

void ParticleType::
Force (const Force_type& x)
{
  this->Force_.set (x);
}

void ParticleType::
Force (::std::auto_ptr< Force_type > x)
{
  this->Force_.set (x);
}

const ParticleType::OldForce_type& ParticleType::
OldForce () const
{
  return this->OldForce_.get ();
}

ParticleType::OldForce_type& ParticleType::
OldForce ()
{
  return this->OldForce_.get ();
}

void ParticleType::
OldForce (const OldForce_type& x)
{
  this->OldForce_.set (x);
}

void ParticleType::
OldForce (::std::auto_ptr< OldForce_type > x)
{
  this->OldForce_.set (x);
}

const ParticleType::mass_type& ParticleType::
mass () const
{
  return this->mass_.get ();
}

ParticleType::mass_type& ParticleType::
mass ()
{
  return this->mass_.get ();
}

void ParticleType::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const ParticleType::epsilon_type& ParticleType::
epsilon () const
{
  return this->epsilon_.get ();
}

ParticleType::epsilon_type& ParticleType::
epsilon ()
{
  return this->epsilon_.get ();
}

void ParticleType::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const ParticleType::sigma_type& ParticleType::
sigma () const
{
  return this->sigma_.get ();
}

ParticleType::sigma_type& ParticleType::
sigma ()
{
  return this->sigma_.get ();
}

void ParticleType::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const ParticleType::type_type& ParticleType::
type () const
{
  return this->type_.get ();
}

ParticleType::type_type& ParticleType::
type ()
{
  return this->type_.get ();
}

void ParticleType::
type (const type_type& x)
{
  this->type_.set (x);
}


// Checkpoint
// 

const Checkpoint::metadata_type& Checkpoint::
metadata () const
{
  return this->metadata_.get ();
}

Checkpoint::metadata_type& Checkpoint::
metadata ()
{
  return this->metadata_.get ();
}

void Checkpoint::
metadata (const metadata_type& x)
{
  this->metadata_.set (x);
}

void Checkpoint::
metadata (::std::auto_ptr< metadata_type > x)
{
  this->metadata_.set (x);
}

const Checkpoint::Particles_type& Checkpoint::
Particles () const
{
  return this->Particles_.get ();
}

Checkpoint::Particles_type& Checkpoint::
Particles ()
{
  return this->Particles_.get ();
}

void Checkpoint::
Particles (const Particles_type& x)
{
  this->Particles_.set (x);
}

void Checkpoint::
Particles (::std::auto_ptr< Particles_type > x)
{
  this->Particles_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// ParticleSetType
//

ParticleSetType::
ParticleSetType (const particle_type& particle)
: ::xml_schema::type (),
  particle_ (particle, this)
{
}

ParticleSetType::
ParticleSetType (::std::auto_ptr< particle_type > particle)
: ::xml_schema::type (),
  particle_ (particle, this)
{
}

ParticleSetType::
ParticleSetType (const ParticleSetType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_ (x.particle_, f, this)
{
}

ParticleSetType::
ParticleSetType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ParticleSetType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle
    //
    if (n.name () == "particle" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< particle_type > r (
        particle_traits::create (i, f, this));

      if (!particle_.present ())
      {
        this->particle_.set (r);
        continue;
      }
    }

    break;
  }

  if (!particle_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "particle",
      "");
  }
}

ParticleSetType* ParticleSetType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ParticleSetType (*this, f, c);
}

ParticleSetType& ParticleSetType::
operator= (const ParticleSetType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->particle_ = x.particle_;
  }

  return *this;
}

ParticleSetType::
~ParticleSetType ()
{
}

// ParticleType
//

ParticleType::
ParticleType (const Position_type& Position,
              const Velocity_type& Velocity,
              const Force_type& Force,
              const OldForce_type& OldForce,
              const mass_type& mass,
              const epsilon_type& epsilon,
              const sigma_type& sigma,
              const type_type& type)
: ::xml_schema::type (),
  Position_ (Position, this),
  Velocity_ (Velocity, this),
  Force_ (Force, this),
  OldForce_ (OldForce, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this)
{
}

ParticleType::
ParticleType (::std::auto_ptr< Position_type > Position,
              ::std::auto_ptr< Velocity_type > Velocity,
              ::std::auto_ptr< Force_type > Force,
              ::std::auto_ptr< OldForce_type > OldForce,
              const mass_type& mass,
              const epsilon_type& epsilon,
              const sigma_type& sigma,
              const type_type& type)
: ::xml_schema::type (),
  Position_ (Position, this),
  Velocity_ (Velocity, this),
  Force_ (Force, this),
  OldForce_ (OldForce, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this)
{
}

ParticleType::
ParticleType (const ParticleType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Position_ (x.Position_, f, this),
  Velocity_ (x.Velocity_, f, this),
  Force_ (x.Force_, f, this),
  OldForce_ (x.OldForce_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  type_ (x.type_, f, this)
{
}

ParticleType::
ParticleType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Position_ (this),
  Velocity_ (this),
  Force_ (this),
  OldForce_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ParticleType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Position
    //
    if (n.name () == "Position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Position_type > r (
        Position_traits::create (i, f, this));

      if (!Position_.present ())
      {
        this->Position_.set (r);
        continue;
      }
    }

    // Velocity
    //
    if (n.name () == "Velocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Velocity_type > r (
        Velocity_traits::create (i, f, this));

      if (!Velocity_.present ())
      {
        this->Velocity_.set (r);
        continue;
      }
    }

    // Force
    //
    if (n.name () == "Force" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Force_type > r (
        Force_traits::create (i, f, this));

      if (!Force_.present ())
      {
        this->Force_.set (r);
        continue;
      }
    }

    // OldForce
    //
    if (n.name () == "OldForce" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< OldForce_type > r (
        OldForce_traits::create (i, f, this));

      if (!OldForce_.present ())
      {
        this->OldForce_.set (r);
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!Position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Position",
      "");
  }

  if (!Velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Velocity",
      "");
  }

  if (!Force_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Force",
      "");
  }

  if (!OldForce_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "OldForce",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

ParticleType* ParticleType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ParticleType (*this, f, c);
}

ParticleType& ParticleType::
operator= (const ParticleType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Position_ = x.Position_;
    this->Velocity_ = x.Velocity_;
    this->Force_ = x.Force_;
    this->OldForce_ = x.OldForce_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->type_ = x.type_;
  }

  return *this;
}

ParticleType::
~ParticleType ()
{
}

// Checkpoint
//

Checkpoint::
Checkpoint (const metadata_type& metadata,
            const Particles_type& Particles)
: ::xml_schema::type (),
  metadata_ (metadata, this),
  Particles_ (Particles, this)
{
}

Checkpoint::
Checkpoint (::std::auto_ptr< metadata_type > metadata,
            ::std::auto_ptr< Particles_type > Particles)
: ::xml_schema::type (),
  metadata_ (metadata, this),
  Particles_ (Particles, this)
{
}

Checkpoint::
Checkpoint (const Checkpoint& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  metadata_ (x.metadata_, f, this),
  Particles_ (x.Particles_, f, this)
{
}

Checkpoint::
Checkpoint (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  metadata_ (this),
  Particles_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Checkpoint::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // metadata
    //
    if (n.name () == "metadata" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< metadata_type > r (
        metadata_traits::create (i, f, this));

      if (!metadata_.present ())
      {
        this->metadata_.set (r);
        continue;
      }
    }

    // Particles
    //
    if (n.name () == "Particles" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Particles_type > r (
        Particles_traits::create (i, f, this));

      if (!Particles_.present ())
      {
        this->Particles_.set (r);
        continue;
      }
    }

    break;
  }

  if (!metadata_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "metadata",
      "");
  }

  if (!Particles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Particles",
      "");
  }
}

Checkpoint* Checkpoint::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Checkpoint (*this, f, c);
}

Checkpoint& Checkpoint::
operator= (const Checkpoint& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->metadata_ = x.metadata_;
    this->Particles_ = x.Particles_;
  }

  return *this;
}

Checkpoint::
~Checkpoint ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::Checkpoint > (
    ::Checkpoint_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::Checkpoint > (
    ::Checkpoint_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::Checkpoint > (
    ::Checkpoint_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Checkpoint_ (isrc, f, p);
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Checkpoint_ (isrc, h, f, p);
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Checkpoint_ (isrc, h, f, p);
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Checkpoint_ (isrc, f, p);
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Checkpoint_ (isrc, h, f, p);
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Checkpoint_ (isrc, h, f, p);
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::Checkpoint > (
    ::Checkpoint_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::Checkpoint > (
    ::Checkpoint_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::Checkpoint > (
    ::Checkpoint_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::Checkpoint > (
      ::Checkpoint_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Checkpoint" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::Checkpoint > r (
      ::xsd::cxx::tree::traits< ::Checkpoint, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Checkpoint",
    "");
}

::std::auto_ptr< ::Checkpoint >
Checkpoint_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Checkpoint" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::Checkpoint > r (
      ::xsd::cxx::tree::traits< ::Checkpoint, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Checkpoint",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

