// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "input-pskel.hxx"

// cuboidType_pskel
//

void cuboidType_pskel::
velocity_parser (::Dvec3Type_pskel& p)
{
  this->velocity_parser_ = &p;
}

void cuboidType_pskel::
corner_parser (::Dvec3Type_pskel& p)
{
  this->corner_parser_ = &p;
}

void cuboidType_pskel::
dimensions_parser (::Ivec3Type_pskel& p)
{
  this->dimensions_parser_ = &p;
}

void cuboidType_pskel::
type_parser (::xml_schema::integer_pskel& p)
{
  this->type_parser_ = &p;
}

void cuboidType_pskel::
h_parser (::xml_schema::decimal_pskel& p)
{
  this->h_parser_ = &p;
}

void cuboidType_pskel::
mass_parser (::xml_schema::decimal_pskel& p)
{
  this->mass_parser_ = &p;
}

void cuboidType_pskel::
epsilon_parser (::xml_schema::decimal_pskel& p)
{
  this->epsilon_parser_ = &p;
}

void cuboidType_pskel::
sigma_parser (::xml_schema::decimal_pskel& p)
{
  this->sigma_parser_ = &p;
}

void cuboidType_pskel::
mv_parser (::xml_schema::decimal_pskel& p)
{
  this->mv_parser_ = &p;
}

void cuboidType_pskel::
parsers (::Dvec3Type_pskel& velocity,
         ::Dvec3Type_pskel& corner,
         ::Ivec3Type_pskel& dimensions,
         ::xml_schema::integer_pskel& type,
         ::xml_schema::decimal_pskel& h,
         ::xml_schema::decimal_pskel& mass,
         ::xml_schema::decimal_pskel& epsilon,
         ::xml_schema::decimal_pskel& sigma,
         ::xml_schema::decimal_pskel& mv)
{
  this->velocity_parser_ = &velocity;
  this->corner_parser_ = &corner;
  this->dimensions_parser_ = &dimensions;
  this->type_parser_ = &type;
  this->h_parser_ = &h;
  this->mass_parser_ = &mass;
  this->epsilon_parser_ = &epsilon;
  this->sigma_parser_ = &sigma;
  this->mv_parser_ = &mv;
}

cuboidType_pskel::
cuboidType_pskel ()
: velocity_parser_ (0),
  corner_parser_ (0),
  dimensions_parser_ (0),
  type_parser_ (0),
  h_parser_ (0),
  mass_parser_ (0),
  epsilon_parser_ (0),
  sigma_parser_ (0),
  mv_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Dvec3Type_pskel
//

void Dvec3Type_pskel::
x_parser (::xml_schema::decimal_pskel& p)
{
  this->x_parser_ = &p;
}

void Dvec3Type_pskel::
y_parser (::xml_schema::decimal_pskel& p)
{
  this->y_parser_ = &p;
}

void Dvec3Type_pskel::
z_parser (::xml_schema::decimal_pskel& p)
{
  this->z_parser_ = &p;
}

void Dvec3Type_pskel::
parsers (::xml_schema::decimal_pskel& x,
         ::xml_schema::decimal_pskel& y,
         ::xml_schema::decimal_pskel& z)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

Dvec3Type_pskel::
Dvec3Type_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Ivec3Type_pskel
//

void Ivec3Type_pskel::
x_parser (::xml_schema::integer_pskel& p)
{
  this->x_parser_ = &p;
}

void Ivec3Type_pskel::
y_parser (::xml_schema::integer_pskel& p)
{
  this->y_parser_ = &p;
}

void Ivec3Type_pskel::
z_parser (::xml_schema::integer_pskel& p)
{
  this->z_parser_ = &p;
}

void Ivec3Type_pskel::
parsers (::xml_schema::integer_pskel& x,
         ::xml_schema::integer_pskel& y,
         ::xml_schema::integer_pskel& z)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

Ivec3Type_pskel::
Ivec3Type_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Simulation_pskel
//

void Simulation_pskel::
metadata_parser (::metadata_pskel& p)
{
  this->metadata_parser_ = &p;
}

void Simulation_pskel::
cuboids_parser (::cuboids_pskel& p)
{
  this->cuboids_parser_ = &p;
}

void Simulation_pskel::
parsers (::metadata_pskel& metadata,
         ::cuboids_pskel& cuboids)
{
  this->metadata_parser_ = &metadata;
  this->cuboids_parser_ = &cuboids;
}

Simulation_pskel::
Simulation_pskel ()
: metadata_parser_ (0),
  cuboids_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// metadata_pskel
//

void metadata_pskel::
FileName_parser (::xml_schema::string_pskel& p)
{
  this->FileName_parser_ = &p;
}

void metadata_pskel::
delta_t_parser (::xml_schema::decimal_pskel& p)
{
  this->delta_t_parser_ = &p;
}

void metadata_pskel::
t_end_parser (::xml_schema::double_pskel& p)
{
  this->t_end_parser_ = &p;
}

void metadata_pskel::
parsers (::xml_schema::string_pskel& FileName,
         ::xml_schema::decimal_pskel& delta_t,
         ::xml_schema::double_pskel& t_end)
{
  this->FileName_parser_ = &FileName;
  this->delta_t_parser_ = &delta_t;
  this->t_end_parser_ = &t_end;
}

metadata_pskel::
metadata_pskel ()
: FileName_parser_ (0),
  delta_t_parser_ (0),
  t_end_parser_ (0)
{
}

// cuboids_pskel
//

void cuboids_pskel::
cuboid_parser (::cuboidType_pskel& p)
{
  this->cuboid_parser_ = &p;
}

void cuboids_pskel::
parsers (::cuboidType_pskel& cuboid)
{
  this->cuboid_parser_ = &cuboid;
}

cuboids_pskel::
cuboids_pskel ()
: cuboid_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// cuboidType_pskel
//

void cuboidType_pskel::
velocity ()
{
}

void cuboidType_pskel::
corner ()
{
}

void cuboidType_pskel::
dimensions ()
{
}

void cuboidType_pskel::
type (long long)
{
}

void cuboidType_pskel::
h (double)
{
}

void cuboidType_pskel::
mass (double)
{
}

void cuboidType_pskel::
epsilon (double)
{
}

void cuboidType_pskel::
sigma (double)
{
}

void cuboidType_pskel::
mv (double)
{
}

void cuboidType_pskel::
post_cuboidType ()
{
}

// Dvec3Type_pskel
//

void Dvec3Type_pskel::
x (double)
{
}

void Dvec3Type_pskel::
y (double)
{
}

void Dvec3Type_pskel::
z (double)
{
}

void Dvec3Type_pskel::
post_Dvec3Type ()
{
}

// Ivec3Type_pskel
//

void Ivec3Type_pskel::
x (long long)
{
}

void Ivec3Type_pskel::
y (long long)
{
}

void Ivec3Type_pskel::
z (long long)
{
}

void Ivec3Type_pskel::
post_Ivec3Type ()
{
}

// Simulation_pskel
//

void Simulation_pskel::
metadata ()
{
}

void Simulation_pskel::
cuboids ()
{
}

void Simulation_pskel::
post_Simulation ()
{
}

// metadata_pskel
//

void metadata_pskel::
FileName (const ::std::string&)
{
}

void metadata_pskel::
delta_t (double)
{
}

void metadata_pskel::
t_end (double)
{
}

void metadata_pskel::
post_metadata ()
{
}

// cuboids_pskel
//

void cuboids_pskel::
cuboid ()
{
}

void cuboids_pskel::
post_cuboids ()
{
}

#include <cassert>

// Element validation and dispatch functions for cuboidType_pskel.
//
bool cuboidType_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "velocity" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &cuboidType_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "velocity",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool cuboidType_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void cuboidType_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void cuboidType_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "velocity");

  this->v_state_stack_.pop ();
}

void cuboidType_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "velocity" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->velocity_parser_;

          if (this->velocity_parser_)
            this->velocity_parser_->pre ();
        }
        else
        {
          if (this->velocity_parser_)
          {
            this->velocity_parser_->post_Dvec3Type ();
            this->velocity ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "velocity",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "corner" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->corner_parser_;

          if (this->corner_parser_)
            this->corner_parser_->pre ();
        }
        else
        {
          if (this->corner_parser_)
          {
            this->corner_parser_->post_Dvec3Type ();
            this->corner ();
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "corner",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "dimensions" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->dimensions_parser_;

          if (this->dimensions_parser_)
            this->dimensions_parser_->pre ();
        }
        else
        {
          if (this->dimensions_parser_)
          {
            this->dimensions_parser_->post_Ivec3Type ();
            this->dimensions ();
          }

          count = 0;
          state = 3UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "dimensions",
            ns, n);
        count = 0;
        state = 3UL;
        // Fall through.
      }
    }
    case 3UL:
    {
      if (n == "type" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->type_parser_;

          if (this->type_parser_)
            this->type_parser_->pre ();
        }
        else
        {
          if (this->type_parser_)
          {
            long long tmp (this->type_parser_->post_integer ());
            this->type (tmp);
          }

          count = 0;
          state = 4UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "type",
            ns, n);
        count = 0;
        state = 4UL;
        // Fall through.
      }
    }
    case 4UL:
    {
      if (n == "h" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->h_parser_;

          if (this->h_parser_)
            this->h_parser_->pre ();
        }
        else
        {
          if (this->h_parser_)
          {
            double tmp (this->h_parser_->post_decimal ());
            this->h (tmp);
          }

          count = 0;
          state = 5UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "h",
            ns, n);
        count = 0;
        state = 5UL;
        // Fall through.
      }
    }
    case 5UL:
    {
      if (n == "mass" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->mass_parser_;

          if (this->mass_parser_)
            this->mass_parser_->pre ();
        }
        else
        {
          if (this->mass_parser_)
          {
            double tmp (this->mass_parser_->post_decimal ());
            this->mass (tmp);
          }

          count = 0;
          state = 6UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "mass",
            ns, n);
        count = 0;
        state = 6UL;
        // Fall through.
      }
    }
    case 6UL:
    {
      if (n == "epsilon" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->epsilon_parser_;

          if (this->epsilon_parser_)
            this->epsilon_parser_->pre ();
        }
        else
        {
          if (this->epsilon_parser_)
          {
            double tmp (this->epsilon_parser_->post_decimal ());
            this->epsilon (tmp);
          }

          count = 0;
          state = 7UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "epsilon",
            ns, n);
        count = 0;
        state = 7UL;
        // Fall through.
      }
    }
    case 7UL:
    {
      if (n == "sigma" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->sigma_parser_;

          if (this->sigma_parser_)
            this->sigma_parser_->pre ();
        }
        else
        {
          if (this->sigma_parser_)
          {
            double tmp (this->sigma_parser_->post_decimal ());
            this->sigma (tmp);
          }

          count = 0;
          state = 8UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "sigma",
            ns, n);
        count = 0;
        state = 8UL;
        // Fall through.
      }
    }
    case 8UL:
    {
      if (n == "mv" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->mv_parser_;

          if (this->mv_parser_)
            this->mv_parser_->pre ();
        }
        else
        {
          if (this->mv_parser_)
          {
            double tmp (this->mv_parser_->post_decimal ());
            this->mv (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "mv",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for Dvec3Type_pskel.
//
bool Dvec3Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "x" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Dvec3Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Dvec3Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Dvec3Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Dvec3Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "x");

  this->v_state_stack_.pop ();
}

void Dvec3Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            double tmp (this->x_parser_->post_decimal ());
            this->x (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            double tmp (this->y_parser_->post_decimal ());
            this->y (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            double tmp (this->z_parser_->post_decimal ());
            this->z (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for Ivec3Type_pskel.
//
bool Ivec3Type_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "x" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Ivec3Type_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Ivec3Type_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Ivec3Type_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Ivec3Type_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "x");

  this->v_state_stack_.pop ();
}

void Ivec3Type_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "x" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

          if (this->x_parser_)
            this->x_parser_->pre ();
        }
        else
        {
          if (this->x_parser_)
          {
            long long tmp (this->x_parser_->post_integer ());
            this->x (tmp);
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "x",
            ns, n);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "y" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

          if (this->y_parser_)
            this->y_parser_->pre ();
        }
        else
        {
          if (this->y_parser_)
          {
            long long tmp (this->y_parser_->post_integer ());
            this->y (tmp);
          }

          count = 0;
          state = 2UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "y",
            ns, n);
        count = 0;
        state = 2UL;
        // Fall through.
      }
    }
    case 2UL:
    {
      if (n == "z" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

          if (this->z_parser_)
            this->z_parser_->pre ();
        }
        else
        {
          if (this->z_parser_)
          {
            long long tmp (this->z_parser_->post_integer ());
            this->z (tmp);
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "z",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for Simulation_pskel.
//
bool Simulation_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "metadata" && ns.empty ())
        s = 0UL;
      else if (n == "cuboids" && ns.empty ())
        s = 1UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &Simulation_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "metadata",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool Simulation_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void Simulation_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void Simulation_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "metadata");

  this->v_state_stack_.pop ();
}

void Simulation_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "metadata" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->metadata_parser_;

          if (this->metadata_parser_)
            this->metadata_parser_->pre ();
        }
        else
        {
          if (this->metadata_parser_)
          {
            this->metadata_parser_->post_metadata ();
            this->metadata ();
          }

          count = 0;
          state = 1UL;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    case 1UL:
    {
      if (n == "cuboids" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboids_parser_;

          if (this->cuboids_parser_)
            this->cuboids_parser_->pre ();
        }
        else
        {
          if (this->cuboids_parser_)
          {
            this->cuboids_parser_->post_cuboids ();
            this->cuboids ();
          }

          count = 0;
          state = ~0UL;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "cuboids",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for cuboids_pskel.
//
bool cuboids_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL)
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "cuboid" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &cuboids_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, t, true);
      }
      else
      {
        if (vd->count < 1UL)
          this->_expected_element (
            "", "cuboid",
            ns, n);
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool cuboids_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    if (!::xml_schema::complex_content::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void cuboids_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void cuboids_pskel::
_post_e_validate ()
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xml_schema::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }

  if (vd->count < 1UL)
    this->_expected_element (
      "", "cuboid");

  this->v_state_stack_.pop ();
}

void cuboids_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
{
  XSD_UNUSED (t);

  switch (state)
  {
    case 0UL:
    {
      if (n == "cuboid" && ns.empty ())
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->cuboid_parser_;

          if (this->cuboid_parser_)
            this->cuboid_parser_->pre ();
        }
        else
        {
          if (this->cuboid_parser_)
          {
            this->cuboid_parser_->post_cuboidType ();
            this->cuboid ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        if (count < 1UL)
          this->_expected_element (
            "", "cuboid",
            ns, n);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for metadata_pskel.
//
bool metadata_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "FileName" && ns.empty ())
  {
    if (this->FileName_parser_)
    {
      this->FileName_parser_->pre ();
      this->FileName_parser_->_pre_impl ();
      this->FileName_parser_->_characters (s);
      this->FileName_parser_->_post_impl ();
      const ::std::string& tmp (this->FileName_parser_->post_string ());
      this->FileName (tmp);
    }

    return true;
  }

  if (n == "delta_t" && ns.empty ())
  {
    if (this->delta_t_parser_)
    {
      this->delta_t_parser_->pre ();
      this->delta_t_parser_->_pre_impl ();
      this->delta_t_parser_->_characters (s);
      this->delta_t_parser_->_post_impl ();
      double tmp (this->delta_t_parser_->post_decimal ());
      this->delta_t (tmp);
    }

    return true;
  }

  if (n == "t_end" && ns.empty ())
  {
    if (this->t_end_parser_)
    {
      this->t_end_parser_->pre ();
      this->t_end_parser_->_pre_impl ();
      this->t_end_parser_->_characters (s);
      this->t_end_parser_->_post_impl ();
      double tmp (this->t_end_parser_->post_double ());
      this->t_end (tmp);
    }

    return true;
  }

  return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

