// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SRC_IO_FILE_IN_XML_INPUT_HXX
#define CXX___SRC_IO_FILE_IN_XML_INPUT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
// #error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/types.hxx>
#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/dom/auto-ptr.hxx>
#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/xml/error-handler.hxx>

namespace xml_schema {
// anyType and anySimpleType.
//
typedef ::xsd::cxx::tree::type type;
typedef ::xsd::cxx::tree::simple_type<char, type> simple_type;
typedef ::xsd::cxx::tree::type container;

// 8-bit
//
typedef signed char byte;
typedef unsigned char unsigned_byte;

// 16-bit
//
typedef short short_;
typedef unsigned short unsigned_short;

// 32-bit
//
typedef int int_;
typedef unsigned int unsigned_int;

// 64-bit
//
typedef long long long_;
typedef unsigned long long unsigned_long;

// Supposed to be arbitrary-length integral types.
//
typedef long long integer;
typedef long long non_positive_integer;
typedef unsigned long long non_negative_integer;
typedef unsigned long long positive_integer;
typedef long long negative_integer;

// Boolean.
//
typedef bool boolean;

// Floating-point types.
//
typedef float float_;
typedef double double_;
typedef double decimal;

// String types.
//
typedef ::xsd::cxx::tree::string<char, simple_type> string;
typedef ::xsd::cxx::tree::normalized_string<char, string> normalized_string;
typedef ::xsd::cxx::tree::token<char, normalized_string> token;
typedef ::xsd::cxx::tree::name<char, token> name;
typedef ::xsd::cxx::tree::nmtoken<char, token> nmtoken;
typedef ::xsd::cxx::tree::nmtokens<char, simple_type, nmtoken> nmtokens;
typedef ::xsd::cxx::tree::ncname<char, name> ncname;
typedef ::xsd::cxx::tree::language<char, token> language;

// ID/IDREF.
//
typedef ::xsd::cxx::tree::id<char, ncname> id;
typedef ::xsd::cxx::tree::idref<char, ncname, type> idref;
typedef ::xsd::cxx::tree::idrefs<char, simple_type, idref> idrefs;

// URI.
//
typedef ::xsd::cxx::tree::uri<char, simple_type> uri;

// Qualified name.
//
typedef ::xsd::cxx::tree::qname<char, simple_type, uri, ncname> qname;

// Binary.
//
typedef ::xsd::cxx::tree::buffer<char> buffer;
typedef ::xsd::cxx::tree::base64_binary<char, simple_type> base64_binary;
typedef ::xsd::cxx::tree::hex_binary<char, simple_type> hex_binary;

// Date/time.
//
typedef ::xsd::cxx::tree::time_zone time_zone;
typedef ::xsd::cxx::tree::date<char, simple_type> date;
typedef ::xsd::cxx::tree::date_time<char, simple_type> date_time;
typedef ::xsd::cxx::tree::duration<char, simple_type> duration;
typedef ::xsd::cxx::tree::gday<char, simple_type> gday;
typedef ::xsd::cxx::tree::gmonth<char, simple_type> gmonth;
typedef ::xsd::cxx::tree::gmonth_day<char, simple_type> gmonth_day;
typedef ::xsd::cxx::tree::gyear<char, simple_type> gyear;
typedef ::xsd::cxx::tree::gyear_month<char, simple_type> gyear_month;
typedef ::xsd::cxx::tree::time<char, simple_type> time;

// Entity.
//
typedef ::xsd::cxx::tree::entity<char, ncname> entity;
typedef ::xsd::cxx::tree::entities<char, simple_type, entity> entities;

typedef ::xsd::cxx::tree::content_order content_order;
// Namespace information and list stream. Used in
// serialization functions.
//
typedef ::xsd::cxx::xml::dom::namespace_info<char> namespace_info;
typedef ::xsd::cxx::xml::dom::namespace_infomap<char> namespace_infomap;
typedef ::xsd::cxx::tree::list_stream<char> list_stream;
typedef ::xsd::cxx::tree::as_double<double_> as_double;
typedef ::xsd::cxx::tree::as_decimal<decimal> as_decimal;
typedef ::xsd::cxx::tree::facet facet;

// Flags and properties.
//
typedef ::xsd::cxx::tree::flags flags;
typedef ::xsd::cxx::tree::properties<char> properties;

// Parsing/serialization diagnostics.
//
typedef ::xsd::cxx::tree::severity severity;
typedef ::xsd::cxx::tree::error<char> error;
typedef ::xsd::cxx::tree::diagnostics<char> diagnostics;

// Exceptions.
//
typedef ::xsd::cxx::tree::exception<char> exception;
typedef ::xsd::cxx::tree::bounds<char> bounds;
typedef ::xsd::cxx::tree::duplicate_id<char> duplicate_id;
typedef ::xsd::cxx::tree::parsing<char> parsing;
typedef ::xsd::cxx::tree::expected_element<char> expected_element;
typedef ::xsd::cxx::tree::unexpected_element<char> unexpected_element;
typedef ::xsd::cxx::tree::expected_attribute<char> expected_attribute;
typedef ::xsd::cxx::tree::unexpected_enumerator<char> unexpected_enumerator;
typedef ::xsd::cxx::tree::expected_text_content<char> expected_text_content;
typedef ::xsd::cxx::tree::no_prefix_mapping<char> no_prefix_mapping;
typedef ::xsd::cxx::tree::serialization<char> serialization;

// Error handler callback interface.
//
typedef ::xsd::cxx::xml::error_handler<char> error_handler;

// DOM interaction.
//
namespace dom {
// Automatic pointer for DOMDocument.
//
using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
// DOM user data key for back pointers to tree nodes.
//
const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
}  // namespace dom
}  // namespace xml_schema

// Forward declarations.
//
class MetadataType;
class cuboidType;
class spheroidType;
class Dvec3Type;
class Ivec3Type;
class ContainerType;
class LinkedCellsType;
class DirectSumType;
class BoundaryType;
class BoundaryConfigType;
class ForceType;
class GravityType;
class LennardJonesForce;
class SingularGravityType;
class HarmonicForceType;
class ThermostatType;
class simulation;
class cuboids;
class spheroids;

#include <algorithm>  // std::binary_search
#include <limits>     // std::numeric_limits
#include <memory>     // ::std::auto_ptr
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/list.hxx>
#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/dom/parsing-header.hxx>

class MetadataType : public ::xml_schema::type {
 public:
  // container
  //
  typedef ::ContainerType container_type;
  typedef ::xsd::cxx::tree::traits<container_type, char> container_traits;

  const container_type& container() const;

  container_type& container();

  void container(const container_type& x);

  void container(::std::auto_ptr<container_type> p);

  // force
  //
  typedef ::ForceType force_type;
  typedef ::xsd::cxx::tree::traits<force_type, char> force_traits;

  const force_type& force() const;

  force_type& force();

  void force(const force_type& x);

  void force(::std::auto_ptr<force_type> p);

  // delta_t
  //
  typedef ::xml_schema::decimal delta_t_type;
  typedef ::xsd::cxx::tree::traits<delta_t_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      delta_t_traits;

  const delta_t_type& delta_t() const;

  delta_t_type& delta_t();

  void delta_t(const delta_t_type& x);

  // t_end
  //
  typedef ::xml_schema::double_ t_end_type;
  typedef ::xsd::cxx::tree::traits<t_end_type, char,
                                   ::xsd::cxx::tree::schema_type::double_>
      t_end_traits;

  const t_end_type& t_end() const;

  t_end_type& t_end();

  void t_end(const t_end_type& x);

  // twoD
  //
  typedef ::xml_schema::boolean twoD_type;
  typedef ::xsd::cxx::tree::traits<twoD_type, char> twoD_traits;

  const twoD_type& twoD() const;

  twoD_type& twoD();

  void twoD(const twoD_type& x);

  // checkpoint
  //
  typedef ::xml_schema::string checkpoint_type;
  typedef ::xsd::cxx::tree::optional<checkpoint_type> checkpoint_optional;
  typedef ::xsd::cxx::tree::traits<checkpoint_type, char> checkpoint_traits;

  const checkpoint_optional& checkpoint() const;

  checkpoint_optional& checkpoint();

  void checkpoint(const checkpoint_type& x);

  void checkpoint(const checkpoint_optional& x);

  void checkpoint(::std::auto_ptr<checkpoint_type> p);

  // Constructors.
  //
  MetadataType(const container_type&, const force_type&, const delta_t_type&,
               const t_end_type&, const twoD_type&);

  MetadataType(::std::auto_ptr<container_type>, ::std::auto_ptr<force_type>,
               const delta_t_type&, const t_end_type&, const twoD_type&);

  MetadataType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  MetadataType(const MetadataType& x, ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual MetadataType* _clone(::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0) const;

  MetadataType& operator=(const MetadataType& x);

  virtual ~MetadataType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<container_type> container_;
  ::xsd::cxx::tree::one<force_type> force_;
  ::xsd::cxx::tree::one<delta_t_type> delta_t_;
  ::xsd::cxx::tree::one<t_end_type> t_end_;
  ::xsd::cxx::tree::one<twoD_type> twoD_;
  checkpoint_optional checkpoint_;
};

class cuboidType : public ::xml_schema::type {
 public:
  // velocity
  //
  typedef ::Dvec3Type velocity_type;
  typedef ::xsd::cxx::tree::traits<velocity_type, char> velocity_traits;

  const velocity_type& velocity() const;

  velocity_type& velocity();

  void velocity(const velocity_type& x);

  void velocity(::std::auto_ptr<velocity_type> p);

  // corner
  //
  typedef ::Dvec3Type corner_type;
  typedef ::xsd::cxx::tree::traits<corner_type, char> corner_traits;

  const corner_type& corner() const;

  corner_type& corner();

  void corner(const corner_type& x);

  void corner(::std::auto_ptr<corner_type> p);

  // dimensions
  //
  typedef ::Ivec3Type dimensions_type;
  typedef ::xsd::cxx::tree::traits<dimensions_type, char> dimensions_traits;

  const dimensions_type& dimensions() const;

  dimensions_type& dimensions();

  void dimensions(const dimensions_type& x);

  void dimensions(::std::auto_ptr<dimensions_type> p);

  // type
  //
  typedef ::xml_schema::int_ type_type;
  typedef ::xsd::cxx::tree::traits<type_type, char> type_traits;

  const type_type& type() const;

  type_type& type();

  void type(const type_type& x);

  // h
  //
  typedef ::xml_schema::decimal h_type;
  typedef ::xsd::cxx::tree::traits<h_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      h_traits;

  const h_type& h() const;

  h_type& h();

  void h(const h_type& x);

  // mass
  //
  typedef ::xml_schema::decimal mass_type;
  typedef ::xsd::cxx::tree::traits<mass_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      mass_traits;

  const mass_type& mass() const;

  mass_type& mass();

  void mass(const mass_type& x);

  // epsilon
  //
  typedef ::xml_schema::decimal epsilon_type;
  typedef ::xsd::cxx::tree::traits<epsilon_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      epsilon_traits;

  const epsilon_type& epsilon() const;

  epsilon_type& epsilon();

  void epsilon(const epsilon_type& x);

  // sigma
  //
  typedef ::xml_schema::decimal sigma_type;
  typedef ::xsd::cxx::tree::traits<sigma_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      sigma_traits;

  const sigma_type& sigma() const;

  sigma_type& sigma();

  void sigma(const sigma_type& x);

  // mv
  //
  typedef ::xml_schema::decimal mv_type;
  typedef ::xsd::cxx::tree::traits<mv_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      mv_traits;

  const mv_type& mv() const;

  mv_type& mv();

  void mv(const mv_type& x);

  // Constructors.
  //
  cuboidType(const velocity_type&, const corner_type&, const dimensions_type&,
             const type_type&, const h_type&, const mass_type&,
             const epsilon_type&, const sigma_type&, const mv_type&);

  cuboidType(::std::auto_ptr<velocity_type>, ::std::auto_ptr<corner_type>,
             ::std::auto_ptr<dimensions_type>, const type_type&, const h_type&,
             const mass_type&, const epsilon_type&, const sigma_type&,
             const mv_type&);

  cuboidType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  cuboidType(const cuboidType& x, ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual cuboidType* _clone(::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0) const;

  cuboidType& operator=(const cuboidType& x);

  virtual ~cuboidType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<velocity_type> velocity_;
  ::xsd::cxx::tree::one<corner_type> corner_;
  ::xsd::cxx::tree::one<dimensions_type> dimensions_;
  ::xsd::cxx::tree::one<type_type> type_;
  ::xsd::cxx::tree::one<h_type> h_;
  ::xsd::cxx::tree::one<mass_type> mass_;
  ::xsd::cxx::tree::one<epsilon_type> epsilon_;
  ::xsd::cxx::tree::one<sigma_type> sigma_;
  ::xsd::cxx::tree::one<mv_type> mv_;
};

class spheroidType : public ::xml_schema::type {
 public:
  // velocity
  //
  typedef ::Dvec3Type velocity_type;
  typedef ::xsd::cxx::tree::traits<velocity_type, char> velocity_traits;

  const velocity_type& velocity() const;

  velocity_type& velocity();

  void velocity(const velocity_type& x);

  void velocity(::std::auto_ptr<velocity_type> p);

  // origin
  //
  typedef ::Dvec3Type origin_type;
  typedef ::xsd::cxx::tree::traits<origin_type, char> origin_traits;

  const origin_type& origin() const;

  origin_type& origin();

  void origin(const origin_type& x);

  void origin(::std::auto_ptr<origin_type> p);

  // radius
  //
  typedef ::xml_schema::int_ radius_type;
  typedef ::xsd::cxx::tree::traits<radius_type, char> radius_traits;

  const radius_type& radius() const;

  radius_type& radius();

  void radius(const radius_type& x);

  // type
  //
  typedef ::xml_schema::int_ type_type;
  typedef ::xsd::cxx::tree::traits<type_type, char> type_traits;

  const type_type& type() const;

  type_type& type();

  void type(const type_type& x);

  // h
  //
  typedef ::xml_schema::decimal h_type;
  typedef ::xsd::cxx::tree::traits<h_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      h_traits;

  const h_type& h() const;

  h_type& h();

  void h(const h_type& x);

  // mass
  //
  typedef ::xml_schema::decimal mass_type;
  typedef ::xsd::cxx::tree::traits<mass_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      mass_traits;

  const mass_type& mass() const;

  mass_type& mass();

  void mass(const mass_type& x);

  // epsilon
  //
  typedef ::xml_schema::decimal epsilon_type;
  typedef ::xsd::cxx::tree::traits<epsilon_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      epsilon_traits;

  const epsilon_type& epsilon() const;

  epsilon_type& epsilon();

  void epsilon(const epsilon_type& x);

  // sigma
  //
  typedef ::xml_schema::decimal sigma_type;
  typedef ::xsd::cxx::tree::traits<sigma_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      sigma_traits;

  const sigma_type& sigma() const;

  sigma_type& sigma();

  void sigma(const sigma_type& x);

  // mv
  //
  typedef ::xml_schema::decimal mv_type;
  typedef ::xsd::cxx::tree::traits<mv_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      mv_traits;

  const mv_type& mv() const;

  mv_type& mv();

  void mv(const mv_type& x);

  // Constructors.
  //
  spheroidType(const velocity_type&, const origin_type&, const radius_type&,
               const type_type&, const h_type&, const mass_type&,
               const epsilon_type&, const sigma_type&, const mv_type&);

  spheroidType(::std::auto_ptr<velocity_type>, ::std::auto_ptr<origin_type>,
               const radius_type&, const type_type&, const h_type&,
               const mass_type&, const epsilon_type&, const sigma_type&,
               const mv_type&);

  spheroidType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  spheroidType(const spheroidType& x, ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual spheroidType* _clone(::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0) const;

  spheroidType& operator=(const spheroidType& x);

  virtual ~spheroidType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<velocity_type> velocity_;
  ::xsd::cxx::tree::one<origin_type> origin_;
  ::xsd::cxx::tree::one<radius_type> radius_;
  ::xsd::cxx::tree::one<type_type> type_;
  ::xsd::cxx::tree::one<h_type> h_;
  ::xsd::cxx::tree::one<mass_type> mass_;
  ::xsd::cxx::tree::one<epsilon_type> epsilon_;
  ::xsd::cxx::tree::one<sigma_type> sigma_;
  ::xsd::cxx::tree::one<mv_type> mv_;
};

class Dvec3Type : public ::xml_schema::type {
 public:
  // x
  //
  typedef ::xml_schema::decimal x_type;
  typedef ::xsd::cxx::tree::traits<x_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      x_traits;

  const x_type& x() const;

  x_type& x();

  void x(const x_type& x);

  // y
  //
  typedef ::xml_schema::decimal y_type;
  typedef ::xsd::cxx::tree::traits<y_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      y_traits;

  const y_type& y() const;

  y_type& y();

  void y(const y_type& x);

  // z
  //
  typedef ::xml_schema::decimal z_type;
  typedef ::xsd::cxx::tree::traits<z_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      z_traits;

  const z_type& z() const;

  z_type& z();

  void z(const z_type& x);

  // Constructors.
  //
  Dvec3Type(const x_type&, const y_type&, const z_type&);

  Dvec3Type(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Dvec3Type(const Dvec3Type& x, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Dvec3Type* _clone(::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0) const;

  Dvec3Type& operator=(const Dvec3Type& x);

  virtual ~Dvec3Type();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<x_type> x_;
  ::xsd::cxx::tree::one<y_type> y_;
  ::xsd::cxx::tree::one<z_type> z_;
};

class Ivec3Type : public ::xml_schema::type {
 public:
  // x
  //
  typedef ::xml_schema::int_ x_type;
  typedef ::xsd::cxx::tree::traits<x_type, char> x_traits;

  const x_type& x() const;

  x_type& x();

  void x(const x_type& x);

  // y
  //
  typedef ::xml_schema::int_ y_type;
  typedef ::xsd::cxx::tree::traits<y_type, char> y_traits;

  const y_type& y() const;

  y_type& y();

  void y(const y_type& x);

  // z
  //
  typedef ::xml_schema::int_ z_type;
  typedef ::xsd::cxx::tree::traits<z_type, char> z_traits;

  const z_type& z() const;

  z_type& z();

  void z(const z_type& x);

  // Constructors.
  //
  Ivec3Type(const x_type&, const y_type&, const z_type&);

  Ivec3Type(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Ivec3Type(const Ivec3Type& x, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Ivec3Type* _clone(::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0) const;

  Ivec3Type& operator=(const Ivec3Type& x);

  virtual ~Ivec3Type();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<x_type> x_;
  ::xsd::cxx::tree::one<y_type> y_;
  ::xsd::cxx::tree::one<z_type> z_;
};

class ContainerType : public ::xml_schema::type {
 public:
  // directSum
  //
  typedef ::DirectSumType directSum_type;
  typedef ::xsd::cxx::tree::optional<directSum_type> directSum_optional;
  typedef ::xsd::cxx::tree::traits<directSum_type, char> directSum_traits;

  const directSum_optional& directSum() const;

  directSum_optional& directSum();

  void directSum(const directSum_type& x);

  void directSum(const directSum_optional& x);

  void directSum(::std::auto_ptr<directSum_type> p);

  // linkedCells
  //
  typedef ::LinkedCellsType linkedCells_type;
  typedef ::xsd::cxx::tree::optional<linkedCells_type> linkedCells_optional;
  typedef ::xsd::cxx::tree::traits<linkedCells_type, char> linkedCells_traits;

  const linkedCells_optional& linkedCells() const;

  linkedCells_optional& linkedCells();

  void linkedCells(const linkedCells_type& x);

  void linkedCells(const linkedCells_optional& x);

  void linkedCells(::std::auto_ptr<linkedCells_type> p);

  // Constructors.
  //
  ContainerType();

  ContainerType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  ContainerType(const ContainerType& x, ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual ContainerType* _clone(::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0) const;

  ContainerType& operator=(const ContainerType& x);

  virtual ~ContainerType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  directSum_optional directSum_;
  linkedCells_optional linkedCells_;
};

class LinkedCellsType : public ::xml_schema::type {
 public:
  // domain
  //
  typedef ::Ivec3Type domain_type;
  typedef ::xsd::cxx::tree::traits<domain_type, char> domain_traits;

  const domain_type& domain() const;

  domain_type& domain();

  void domain(const domain_type& x);

  void domain(::std::auto_ptr<domain_type> p);

  // r_cutoff
  //
  typedef ::xml_schema::decimal r_cutoff_type;
  typedef ::xsd::cxx::tree::traits<r_cutoff_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      r_cutoff_traits;

  const r_cutoff_type& r_cutoff() const;

  r_cutoff_type& r_cutoff();

  void r_cutoff(const r_cutoff_type& x);

  // boundary
  //
  typedef ::BoundaryConfigType boundary_type;
  typedef ::xsd::cxx::tree::traits<boundary_type, char> boundary_traits;

  const boundary_type& boundary() const;

  boundary_type& boundary();

  void boundary(const boundary_type& x);

  void boundary(::std::auto_ptr<boundary_type> p);

  // Constructors.
  //
  LinkedCellsType(const domain_type&, const r_cutoff_type&,
                  const boundary_type&);

  LinkedCellsType(::std::auto_ptr<domain_type>, const r_cutoff_type&,
                  ::std::auto_ptr<boundary_type>);

  LinkedCellsType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  LinkedCellsType(const LinkedCellsType& x, ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual LinkedCellsType* _clone(::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0) const;

  LinkedCellsType& operator=(const LinkedCellsType& x);

  virtual ~LinkedCellsType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<domain_type> domain_;
  ::xsd::cxx::tree::one<r_cutoff_type> r_cutoff_;
  ::xsd::cxx::tree::one<boundary_type> boundary_;
};

class DirectSumType : public ::xml_schema::type {
 public:
  // Constructors.
  //
  DirectSumType();

  DirectSumType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  DirectSumType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  DirectSumType(const ::std::string& s, const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

  DirectSumType(const DirectSumType& x, ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual DirectSumType* _clone(::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0) const;

  virtual ~DirectSumType();
};

class BoundaryType : public ::xml_schema::type {
 public:
  // Outflow
  //
  typedef ::xml_schema::type Outflow_type;
  typedef ::xsd::cxx::tree::optional<Outflow_type> Outflow_optional;
  typedef ::xsd::cxx::tree::traits<Outflow_type, char> Outflow_traits;

  const Outflow_optional& Outflow() const;

  Outflow_optional& Outflow();

  void Outflow(const Outflow_type& x);

  void Outflow(const Outflow_optional& x);

  void Outflow(::std::auto_ptr<Outflow_type> p);

  // Reflective
  //
  typedef ::xml_schema::type Reflective_type;
  typedef ::xsd::cxx::tree::optional<Reflective_type> Reflective_optional;
  typedef ::xsd::cxx::tree::traits<Reflective_type, char> Reflective_traits;

  const Reflective_optional& Reflective() const;

  Reflective_optional& Reflective();

  void Reflective(const Reflective_type& x);

  void Reflective(const Reflective_optional& x);

  void Reflective(::std::auto_ptr<Reflective_type> p);

  // Periodic
  //
  typedef ::xml_schema::type Periodic_type;
  typedef ::xsd::cxx::tree::optional<Periodic_type> Periodic_optional;
  typedef ::xsd::cxx::tree::traits<Periodic_type, char> Periodic_traits;

  const Periodic_optional& Periodic() const;

  Periodic_optional& Periodic();

  void Periodic(const Periodic_type& x);

  void Periodic(const Periodic_optional& x);

  void Periodic(::std::auto_ptr<Periodic_type> p);

  // Constructors.
  //
  BoundaryType();

  BoundaryType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  BoundaryType(const BoundaryType& x, ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual BoundaryType* _clone(::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0) const;

  BoundaryType& operator=(const BoundaryType& x);

  virtual ~BoundaryType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  Outflow_optional Outflow_;
  Reflective_optional Reflective_;
  Periodic_optional Periodic_;
};

class BoundaryConfigType : public ::xml_schema::type {
 public:
  // x_high
  //
  typedef ::BoundaryType x_high_type;
  typedef ::xsd::cxx::tree::traits<x_high_type, char> x_high_traits;

  const x_high_type& x_high() const;

  x_high_type& x_high();

  void x_high(const x_high_type& x);

  void x_high(::std::auto_ptr<x_high_type> p);

  // x_low
  //
  typedef ::BoundaryType x_low_type;
  typedef ::xsd::cxx::tree::traits<x_low_type, char> x_low_traits;

  const x_low_type& x_low() const;

  x_low_type& x_low();

  void x_low(const x_low_type& x);

  void x_low(::std::auto_ptr<x_low_type> p);

  // y_high
  //
  typedef ::BoundaryType y_high_type;
  typedef ::xsd::cxx::tree::traits<y_high_type, char> y_high_traits;

  const y_high_type& y_high() const;

  y_high_type& y_high();

  void y_high(const y_high_type& x);

  void y_high(::std::auto_ptr<y_high_type> p);

  // y_low
  //
  typedef ::BoundaryType y_low_type;
  typedef ::xsd::cxx::tree::traits<y_low_type, char> y_low_traits;

  const y_low_type& y_low() const;

  y_low_type& y_low();

  void y_low(const y_low_type& x);

  void y_low(::std::auto_ptr<y_low_type> p);

  // z_high
  //
  typedef ::BoundaryType z_high_type;
  typedef ::xsd::cxx::tree::traits<z_high_type, char> z_high_traits;

  const z_high_type& z_high() const;

  z_high_type& z_high();

  void z_high(const z_high_type& x);

  void z_high(::std::auto_ptr<z_high_type> p);

  // z_low
  //
  typedef ::BoundaryType z_low_type;
  typedef ::xsd::cxx::tree::traits<z_low_type, char> z_low_traits;

  const z_low_type& z_low() const;

  z_low_type& z_low();

  void z_low(const z_low_type& x);

  void z_low(::std::auto_ptr<z_low_type> p);

  // Constructors.
  //
  BoundaryConfigType(const x_high_type&, const x_low_type&, const y_high_type&,
                     const y_low_type&, const z_high_type&, const z_low_type&);

  BoundaryConfigType(::std::auto_ptr<x_high_type>, ::std::auto_ptr<x_low_type>,
                     ::std::auto_ptr<y_high_type>, ::std::auto_ptr<y_low_type>,
                     ::std::auto_ptr<z_high_type>, ::std::auto_ptr<z_low_type>);

  BoundaryConfigType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  BoundaryConfigType(const BoundaryConfigType& x, ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual BoundaryConfigType* _clone(::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0) const;

  BoundaryConfigType& operator=(const BoundaryConfigType& x);

  virtual ~BoundaryConfigType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<x_high_type> x_high_;
  ::xsd::cxx::tree::one<x_low_type> x_low_;
  ::xsd::cxx::tree::one<y_high_type> y_high_;
  ::xsd::cxx::tree::one<y_low_type> y_low_;
  ::xsd::cxx::tree::one<z_high_type> z_high_;
  ::xsd::cxx::tree::one<z_low_type> z_low_;
};

class ForceType : public ::xml_schema::type {
 public:
  // Gravity
  //
  typedef ::GravityType Gravity_type;
  typedef ::xsd::cxx::tree::optional<Gravity_type> Gravity_optional;
  typedef ::xsd::cxx::tree::traits<Gravity_type, char> Gravity_traits;

  const Gravity_optional& Gravity() const;

  Gravity_optional& Gravity();

  void Gravity(const Gravity_type& x);

  void Gravity(const Gravity_optional& x);

  void Gravity(::std::auto_ptr<Gravity_type> p);

  // LennardJones
  //
  typedef ::LennardJonesForce LennardJones_type;
  typedef ::xsd::cxx::tree::optional<LennardJones_type> LennardJones_optional;
  typedef ::xsd::cxx::tree::traits<LennardJones_type, char> LennardJones_traits;

  const LennardJones_optional& LennardJones() const;

  LennardJones_optional& LennardJones();

  void LennardJones(const LennardJones_type& x);

  void LennardJones(const LennardJones_optional& x);

  void LennardJones(::std::auto_ptr<LennardJones_type> p);

  // SingularGravity
  //
  typedef ::SingularGravityType SingularGravity_type;
  typedef ::xsd::cxx::tree::optional<SingularGravity_type>
      SingularGravity_optional;
  typedef ::xsd::cxx::tree::traits<SingularGravity_type, char>
      SingularGravity_traits;

  const SingularGravity_optional& SingularGravity() const;

  SingularGravity_optional& SingularGravity();

  void SingularGravity(const SingularGravity_type& x);

  void SingularGravity(const SingularGravity_optional& x);

  void SingularGravity(::std::auto_ptr<SingularGravity_type> p);

  // HarmonicForce
  //
  typedef ::HarmonicForceType HarmonicForce_type;
  typedef ::xsd::cxx::tree::optional<HarmonicForce_type> HarmonicForce_optional;
  typedef ::xsd::cxx::tree::traits<HarmonicForce_type, char>
      HarmonicForce_traits;

  const HarmonicForce_optional& HarmonicForce() const;

  HarmonicForce_optional& HarmonicForce();

  void HarmonicForce(const HarmonicForce_type& x);

  void HarmonicForce(const HarmonicForce_optional& x);

  void HarmonicForce(::std::auto_ptr<HarmonicForce_type> p);

  // Constructors.
  //
  ForceType();

  ForceType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  ForceType(const ForceType& x, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual ForceType* _clone(::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0) const;

  ForceType& operator=(const ForceType& x);

  virtual ~ForceType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  Gravity_optional Gravity_;
  LennardJones_optional LennardJones_;
  SingularGravity_optional SingularGravity_;
  HarmonicForce_optional HarmonicForce_;
};

class GravityType : public ::xml_schema::type {
 public:
  // Constructors.
  //
  GravityType();

  GravityType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  GravityType(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  GravityType(const ::std::string& s, const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

  GravityType(const GravityType& x, ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual GravityType* _clone(::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0) const;

  virtual ~GravityType();
};

class LennardJonesForce : public ::xml_schema::type {
 public:
  // Constructors.
  //
  LennardJonesForce();

  LennardJonesForce(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  LennardJonesForce(const ::xercesc::DOMAttr& a, ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  LennardJonesForce(const ::std::string& s, const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0, ::xml_schema::container* c = 0);

  LennardJonesForce(const LennardJonesForce& x, ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual LennardJonesForce* _clone(::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0) const;

  virtual ~LennardJonesForce();
};

class SingularGravityType : public ::xml_schema::type {
 public:
  // g
  //
  typedef ::xml_schema::decimal g_type;
  typedef ::xsd::cxx::tree::optional<g_type> g_optional;
  typedef ::xsd::cxx::tree::traits<g_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      g_traits;

  const g_optional& g() const;

  g_optional& g();

  void g(const g_type& x);

  void g(const g_optional& x);

  // Constructors.
  //
  SingularGravityType();

  SingularGravityType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  SingularGravityType(const SingularGravityType& x, ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual SingularGravityType* _clone(::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0) const;

  SingularGravityType& operator=(const SingularGravityType& x);

  virtual ~SingularGravityType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  g_optional g_;
};

class HarmonicForceType : public ::xml_schema::type {
 public:
  // r_0
  //
  typedef ::xml_schema::decimal r_0_type;
  typedef ::xsd::cxx::tree::traits<r_0_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      r_0_traits;

  const r_0_type& r_0() const;

  r_0_type& r_0();

  void r_0(const r_0_type& x);

  // k
  //
  typedef ::xml_schema::decimal k_type;
  typedef ::xsd::cxx::tree::traits<k_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      k_traits;

  const k_type& k() const;

  k_type& k();

  void k(const k_type& x);

  // Constructors.
  //
  HarmonicForceType(const r_0_type&, const k_type&);

  HarmonicForceType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  HarmonicForceType(const HarmonicForceType& x, ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual HarmonicForceType* _clone(::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0) const;

  HarmonicForceType& operator=(const HarmonicForceType& x);

  virtual ~HarmonicForceType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<r_0_type> r_0_;
  ::xsd::cxx::tree::one<k_type> k_;
};

class ThermostatType : public ::xml_schema::type {
 public:
  // T_init
  //
  typedef ::xml_schema::decimal T_init_type;
  typedef ::xsd::cxx::tree::traits<T_init_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      T_init_traits;

  const T_init_type& T_init() const;

  T_init_type& T_init();

  void T_init(const T_init_type& x);

  // n_thermostat
  //
  typedef ::xml_schema::int_ n_thermostat_type;
  typedef ::xsd::cxx::tree::traits<n_thermostat_type, char> n_thermostat_traits;

  const n_thermostat_type& n_thermostat() const;

  n_thermostat_type& n_thermostat();

  void n_thermostat(const n_thermostat_type& x);

  // T_target
  //
  typedef ::xml_schema::decimal T_target_type;
  typedef ::xsd::cxx::tree::optional<T_target_type> T_target_optional;
  typedef ::xsd::cxx::tree::traits<T_target_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      T_target_traits;

  const T_target_optional& T_target() const;

  T_target_optional& T_target();

  void T_target(const T_target_type& x);

  void T_target(const T_target_optional& x);

  // deltaT
  //
  typedef ::xml_schema::decimal deltaT_type;
  typedef ::xsd::cxx::tree::optional<deltaT_type> deltaT_optional;
  typedef ::xsd::cxx::tree::traits<deltaT_type, char,
                                   ::xsd::cxx::tree::schema_type::decimal>
      deltaT_traits;

  const deltaT_optional& deltaT() const;

  deltaT_optional& deltaT();

  void deltaT(const deltaT_type& x);

  void deltaT(const deltaT_optional& x);

  // Constructors.
  //
  ThermostatType(const T_init_type&, const n_thermostat_type&);

  ThermostatType(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ThermostatType(const ThermostatType& x, ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ThermostatType* _clone(::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0) const;

  ThermostatType& operator=(const ThermostatType& x);

  virtual ~ThermostatType();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<T_init_type> T_init_;
  ::xsd::cxx::tree::one<n_thermostat_type> n_thermostat_;
  T_target_optional T_target_;
  deltaT_optional deltaT_;
};

class simulation : public ::xml_schema::type {
 public:
  // metadata
  //
  typedef ::MetadataType metadata_type;
  typedef ::xsd::cxx::tree::traits<metadata_type, char> metadata_traits;

  const metadata_type& metadata() const;

  metadata_type& metadata();

  void metadata(const metadata_type& x);

  void metadata(::std::auto_ptr<metadata_type> p);

  // cuboids
  //
  typedef ::cuboids cuboids_type;
  typedef ::xsd::cxx::tree::optional<cuboids_type> cuboids_optional;
  typedef ::xsd::cxx::tree::traits<cuboids_type, char> cuboids_traits;

  const cuboids_optional& cuboids() const;

  cuboids_optional& cuboids();

  void cuboids(const cuboids_type& x);

  void cuboids(const cuboids_optional& x);

  void cuboids(::std::auto_ptr<cuboids_type> p);

  // spheroids
  //
  typedef ::spheroids spheroids_type;
  typedef ::xsd::cxx::tree::optional<spheroids_type> spheroids_optional;
  typedef ::xsd::cxx::tree::traits<spheroids_type, char> spheroids_traits;

  const spheroids_optional& spheroids() const;

  spheroids_optional& spheroids();

  void spheroids(const spheroids_type& x);

  void spheroids(const spheroids_optional& x);

  void spheroids(::std::auto_ptr<spheroids_type> p);

  // thermostat
  //
  typedef ::ThermostatType thermostat_type;
  typedef ::xsd::cxx::tree::optional<thermostat_type> thermostat_optional;
  typedef ::xsd::cxx::tree::traits<thermostat_type, char> thermostat_traits;

  const thermostat_optional& thermostat() const;

  thermostat_optional& thermostat();

  void thermostat(const thermostat_type& x);

  void thermostat(const thermostat_optional& x);

  void thermostat(::std::auto_ptr<thermostat_type> p);

  // Constructors.
  //
  simulation(const metadata_type&);

  simulation(::std::auto_ptr<metadata_type>);

  simulation(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  simulation(const simulation& x, ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual simulation* _clone(::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0) const;

  simulation& operator=(const simulation& x);

  virtual ~simulation();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  ::xsd::cxx::tree::one<metadata_type> metadata_;
  cuboids_optional cuboids_;
  spheroids_optional spheroids_;
  thermostat_optional thermostat_;
};

class cuboids : public ::xml_schema::type {
 public:
  // cuboid
  //
  typedef ::cuboidType cuboid_type;
  typedef ::xsd::cxx::tree::sequence<cuboid_type> cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits<cuboid_type, char> cuboid_traits;

  const cuboid_sequence& cuboid() const;

  cuboid_sequence& cuboid();

  void cuboid(const cuboid_sequence& s);

  // Constructors.
  //
  cuboids();

  cuboids(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  cuboids(const cuboids& x, ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual cuboids* _clone(::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0) const;

  cuboids& operator=(const cuboids& x);

  virtual ~cuboids();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  cuboid_sequence cuboid_;
};

class spheroids : public ::xml_schema::type {
 public:
  // spheroid
  //
  typedef ::spheroidType spheroid_type;
  typedef ::xsd::cxx::tree::sequence<spheroid_type> spheroid_sequence;
  typedef spheroid_sequence::iterator spheroid_iterator;
  typedef spheroid_sequence::const_iterator spheroid_const_iterator;
  typedef ::xsd::cxx::tree::traits<spheroid_type, char> spheroid_traits;

  const spheroid_sequence& spheroid() const;

  spheroid_sequence& spheroid();

  void spheroid(const spheroid_sequence& s);

  // Constructors.
  //
  spheroids();

  spheroids(const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  spheroids(const spheroids& x, ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual spheroids* _clone(::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0) const;

  spheroids& operator=(const spheroids& x);

  virtual ~spheroids();

  // Implementation.
  //
 protected:
  void parse(::xsd::cxx::xml::dom::parser<char>&, ::xml_schema::flags);

 protected:
  spheroid_sequence spheroid_;
};

#include <iosfwd>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/sax/InputSource.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::simulation> simulation_(
    const ::std::string& uri, ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    const ::std::string& uri, ::xml_schema::error_handler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    const ::std::string& uri, ::xercesc::DOMErrorHandler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse std::istream.
//

::std::auto_ptr< ::simulation> simulation_(
    ::std::istream& is, ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::std::istream& is, ::xml_schema::error_handler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::std::istream& is, ::xercesc::DOMErrorHandler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::std::istream& is, const ::std::string& id, ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::std::istream& is, const ::std::string& id,
    ::xml_schema::error_handler& eh, ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::std::istream& is, const ::std::string& id, ::xercesc::DOMErrorHandler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::simulation> simulation_(
    ::xercesc::InputSource& is, ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::xercesc::InputSource& is, ::xml_schema::error_handler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::xercesc::InputSource& is, ::xercesc::DOMErrorHandler& eh,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::simulation> simulation_(
    const ::xercesc::DOMDocument& d, ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

::std::auto_ptr< ::simulation> simulation_(
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument> d,
    ::xml_schema::flags f = 0,
    const ::xml_schema::properties& p = ::xml_schema::properties());

#include <iosfwd>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>
#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void simulation_(::std::ostream& os, const ::simulation& x,
                 const ::xml_schema::namespace_infomap& m =
                     ::xml_schema::namespace_infomap(),
                 const ::std::string& e = "UTF-8", ::xml_schema::flags f = 0);

void simulation_(::std::ostream& os, const ::simulation& x,
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m =
                     ::xml_schema::namespace_infomap(),
                 const ::std::string& e = "UTF-8", ::xml_schema::flags f = 0);

void simulation_(::std::ostream& os, const ::simulation& x,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m =
                     ::xml_schema::namespace_infomap(),
                 const ::std::string& e = "UTF-8", ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void simulation_(::xercesc::XMLFormatTarget& ft, const ::simulation& x,
                 const ::xml_schema::namespace_infomap& m =
                     ::xml_schema::namespace_infomap(),
                 const ::std::string& e = "UTF-8", ::xml_schema::flags f = 0);

void simulation_(::xercesc::XMLFormatTarget& ft, const ::simulation& x,
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m =
                     ::xml_schema::namespace_infomap(),
                 const ::std::string& e = "UTF-8", ::xml_schema::flags f = 0);

void simulation_(::xercesc::XMLFormatTarget& ft, const ::simulation& x,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m =
                     ::xml_schema::namespace_infomap(),
                 const ::std::string& e = "UTF-8", ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void simulation_(::xercesc::DOMDocument& d, const ::simulation& x,
                 ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument> simulation_(
    const ::simulation& x,
    const ::xml_schema::namespace_infomap& m =
        ::xml_schema::namespace_infomap(),
    ::xml_schema::flags f = 0);

void operator<<(::xercesc::DOMElement&, const MetadataType&);

void operator<<(::xercesc::DOMElement&, const cuboidType&);

void operator<<(::xercesc::DOMElement&, const spheroidType&);

void operator<<(::xercesc::DOMElement&, const Dvec3Type&);

void operator<<(::xercesc::DOMElement&, const Ivec3Type&);

void operator<<(::xercesc::DOMElement&, const ContainerType&);

void operator<<(::xercesc::DOMElement&, const LinkedCellsType&);

void operator<<(::xercesc::DOMElement&, const DirectSumType&);

void operator<<(::xercesc::DOMAttr&, const DirectSumType&);

void operator<<(::xml_schema::list_stream&, const DirectSumType&);

void operator<<(::xercesc::DOMElement&, const BoundaryType&);

void operator<<(::xercesc::DOMElement&, const BoundaryConfigType&);

void operator<<(::xercesc::DOMElement&, const ForceType&);

void operator<<(::xercesc::DOMElement&, const GravityType&);

void operator<<(::xercesc::DOMAttr&, const GravityType&);

void operator<<(::xml_schema::list_stream&, const GravityType&);

void operator<<(::xercesc::DOMElement&, const LennardJonesForce&);

void operator<<(::xercesc::DOMAttr&, const LennardJonesForce&);

void operator<<(::xml_schema::list_stream&, const LennardJonesForce&);

void operator<<(::xercesc::DOMElement&, const SingularGravityType&);

void operator<<(::xercesc::DOMElement&, const HarmonicForceType&);

void operator<<(::xercesc::DOMElement&, const ThermostatType&);

void operator<<(::xercesc::DOMElement&, const simulation&);

void operator<<(::xercesc::DOMElement&, const cuboids&);

void operator<<(::xercesc::DOMElement&, const spheroids&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif  // CXX___SRC_IO_FILE_IN_XML_INPUT_HXX
