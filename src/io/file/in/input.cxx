// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "input.hxx"

// cuboidType
// 

const cuboidType::velocity_type& cuboidType::
velocity () const
{
  return this->velocity_.get ();
}

cuboidType::velocity_type& cuboidType::
velocity ()
{
  return this->velocity_.get ();
}

void cuboidType::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboidType::
velocity (::std::auto_ptr< velocity_type > x)
{
  this->velocity_.set (x);
}

const cuboidType::corner_type& cuboidType::
corner () const
{
  return this->corner_.get ();
}

cuboidType::corner_type& cuboidType::
corner ()
{
  return this->corner_.get ();
}

void cuboidType::
corner (const corner_type& x)
{
  this->corner_.set (x);
}

void cuboidType::
corner (::std::auto_ptr< corner_type > x)
{
  this->corner_.set (x);
}

const cuboidType::dimensions_type& cuboidType::
dimensions () const
{
  return this->dimensions_.get ();
}

cuboidType::dimensions_type& cuboidType::
dimensions ()
{
  return this->dimensions_.get ();
}

void cuboidType::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void cuboidType::
dimensions (::std::auto_ptr< dimensions_type > x)
{
  this->dimensions_.set (x);
}

const cuboidType::type_type& cuboidType::
type () const
{
  return this->type_.get ();
}

cuboidType::type_type& cuboidType::
type ()
{
  return this->type_.get ();
}

void cuboidType::
type (const type_type& x)
{
  this->type_.set (x);
}

const cuboidType::h_type& cuboidType::
h () const
{
  return this->h_.get ();
}

cuboidType::h_type& cuboidType::
h ()
{
  return this->h_.get ();
}

void cuboidType::
h (const h_type& x)
{
  this->h_.set (x);
}

const cuboidType::mass_type& cuboidType::
mass () const
{
  return this->mass_.get ();
}

cuboidType::mass_type& cuboidType::
mass ()
{
  return this->mass_.get ();
}

void cuboidType::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboidType::epsilon_type& cuboidType::
epsilon () const
{
  return this->epsilon_.get ();
}

cuboidType::epsilon_type& cuboidType::
epsilon ()
{
  return this->epsilon_.get ();
}

void cuboidType::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const cuboidType::sigma_type& cuboidType::
sigma () const
{
  return this->sigma_.get ();
}

cuboidType::sigma_type& cuboidType::
sigma ()
{
  return this->sigma_.get ();
}

void cuboidType::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const cuboidType::mv_type& cuboidType::
mv () const
{
  return this->mv_.get ();
}

cuboidType::mv_type& cuboidType::
mv ()
{
  return this->mv_.get ();
}

void cuboidType::
mv (const mv_type& x)
{
  this->mv_.set (x);
}


// Dvec3Type
// 

const Dvec3Type::x_type& Dvec3Type::
x () const
{
  return this->x_.get ();
}

Dvec3Type::x_type& Dvec3Type::
x ()
{
  return this->x_.get ();
}

void Dvec3Type::
x (const x_type& x)
{
  this->x_.set (x);
}

const Dvec3Type::y_type& Dvec3Type::
y () const
{
  return this->y_.get ();
}

Dvec3Type::y_type& Dvec3Type::
y ()
{
  return this->y_.get ();
}

void Dvec3Type::
y (const y_type& x)
{
  this->y_.set (x);
}

const Dvec3Type::z_type& Dvec3Type::
z () const
{
  return this->z_.get ();
}

Dvec3Type::z_type& Dvec3Type::
z ()
{
  return this->z_.get ();
}

void Dvec3Type::
z (const z_type& x)
{
  this->z_.set (x);
}


// Ivec3Type
// 

const Ivec3Type::x_type& Ivec3Type::
x () const
{
  return this->x_.get ();
}

Ivec3Type::x_type& Ivec3Type::
x ()
{
  return this->x_.get ();
}

void Ivec3Type::
x (const x_type& x)
{
  this->x_.set (x);
}

const Ivec3Type::y_type& Ivec3Type::
y () const
{
  return this->y_.get ();
}

Ivec3Type::y_type& Ivec3Type::
y ()
{
  return this->y_.get ();
}

void Ivec3Type::
y (const y_type& x)
{
  this->y_.set (x);
}

const Ivec3Type::z_type& Ivec3Type::
z () const
{
  return this->z_.get ();
}

Ivec3Type::z_type& Ivec3Type::
z ()
{
  return this->z_.get ();
}

void Ivec3Type::
z (const z_type& x)
{
  this->z_.set (x);
}


// simulation
// 

const simulation::metadata_optional& simulation::
metadata () const
{
  return this->metadata_;
}

simulation::metadata_optional& simulation::
metadata ()
{
  return this->metadata_;
}

void simulation::
metadata (const metadata_type& x)
{
  this->metadata_.set (x);
}

void simulation::
metadata (const metadata_optional& x)
{
  this->metadata_ = x;
}

void simulation::
metadata (::std::auto_ptr< metadata_type > x)
{
  this->metadata_.set (x);
}

const simulation::cuboids_type& simulation::
cuboids () const
{
  return this->cuboids_.get ();
}

simulation::cuboids_type& simulation::
cuboids ()
{
  return this->cuboids_.get ();
}

void simulation::
cuboids (const cuboids_type& x)
{
  this->cuboids_.set (x);
}

void simulation::
cuboids (::std::auto_ptr< cuboids_type > x)
{
  this->cuboids_.set (x);
}


// metadata
// 

const metadata::FileName_optional& metadata::
FileName () const
{
  return this->FileName_;
}

metadata::FileName_optional& metadata::
FileName ()
{
  return this->FileName_;
}

void metadata::
FileName (const FileName_type& x)
{
  this->FileName_.set (x);
}

void metadata::
FileName (const FileName_optional& x)
{
  this->FileName_ = x;
}

void metadata::
FileName (::std::auto_ptr< FileName_type > x)
{
  this->FileName_.set (x);
}

const metadata::delta_t_optional& metadata::
delta_t () const
{
  return this->delta_t_;
}

metadata::delta_t_optional& metadata::
delta_t ()
{
  return this->delta_t_;
}

void metadata::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

void metadata::
delta_t (const delta_t_optional& x)
{
  this->delta_t_ = x;
}

const metadata::t_end_optional& metadata::
t_end () const
{
  return this->t_end_;
}

metadata::t_end_optional& metadata::
t_end ()
{
  return this->t_end_;
}

void metadata::
t_end (const t_end_type& x)
{
  this->t_end_.set (x);
}

void metadata::
t_end (const t_end_optional& x)
{
  this->t_end_ = x;
}


// cuboids
// 

const cuboids::cuboid_sequence& cuboids::
cuboid () const
{
  return this->cuboid_;
}

cuboids::cuboid_sequence& cuboids::
cuboid ()
{
  return this->cuboid_;
}

void cuboids::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// cuboidType
//

cuboidType::
cuboidType (const velocity_type& velocity,
            const corner_type& corner,
            const dimensions_type& dimensions,
            const type_type& type,
            const h_type& h,
            const mass_type& mass,
            const epsilon_type& epsilon,
            const sigma_type& sigma,
            const mv_type& mv)
: ::xml_schema::type (),
  velocity_ (velocity, this),
  corner_ (corner, this),
  dimensions_ (dimensions, this),
  type_ (type, this),
  h_ (h, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  mv_ (mv, this)
{
}

cuboidType::
cuboidType (::std::auto_ptr< velocity_type > velocity,
            ::std::auto_ptr< corner_type > corner,
            ::std::auto_ptr< dimensions_type > dimensions,
            const type_type& type,
            const h_type& h,
            const mass_type& mass,
            const epsilon_type& epsilon,
            const sigma_type& sigma,
            const mv_type& mv)
: ::xml_schema::type (),
  velocity_ (velocity, this),
  corner_ (corner, this),
  dimensions_ (dimensions, this),
  type_ (type, this),
  h_ (h, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  mv_ (mv, this)
{
}

cuboidType::
cuboidType (const cuboidType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  velocity_ (x.velocity_, f, this),
  corner_ (x.corner_, f, this),
  dimensions_ (x.dimensions_, f, this),
  type_ (x.type_, f, this),
  h_ (x.h_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  mv_ (x.mv_, f, this)
{
}

cuboidType::
cuboidType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  velocity_ (this),
  corner_ (this),
  dimensions_ (this),
  type_ (this),
  h_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  mv_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboidType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (r);
        continue;
      }
    }

    // corner
    //
    if (n.name () == "corner" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< corner_type > r (
        corner_traits::create (i, f, this));

      if (!corner_.present ())
      {
        this->corner_.set (r);
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (r);
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // h
    //
    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      if (!h_.present ())
      {
        this->h_.set (h_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // mv
    //
    if (n.name () == "mv" && n.namespace_ ().empty ())
    {
      if (!mv_.present ())
      {
        this->mv_.set (mv_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!corner_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "corner",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "h",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!mv_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mv",
      "");
  }
}

cuboidType* cuboidType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboidType (*this, f, c);
}

cuboidType& cuboidType::
operator= (const cuboidType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->velocity_ = x.velocity_;
    this->corner_ = x.corner_;
    this->dimensions_ = x.dimensions_;
    this->type_ = x.type_;
    this->h_ = x.h_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->mv_ = x.mv_;
  }

  return *this;
}

cuboidType::
~cuboidType ()
{
}

// Dvec3Type
//

Dvec3Type::
Dvec3Type (const x_type& x,
           const y_type& y,
           const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

Dvec3Type::
Dvec3Type (const Dvec3Type& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

Dvec3Type::
Dvec3Type (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Dvec3Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

Dvec3Type* Dvec3Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Dvec3Type (*this, f, c);
}

Dvec3Type& Dvec3Type::
operator= (const Dvec3Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

Dvec3Type::
~Dvec3Type ()
{
}

// Ivec3Type
//

Ivec3Type::
Ivec3Type (const x_type& x,
           const y_type& y,
           const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

Ivec3Type::
Ivec3Type (const Ivec3Type& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

Ivec3Type::
Ivec3Type (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Ivec3Type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

Ivec3Type* Ivec3Type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Ivec3Type (*this, f, c);
}

Ivec3Type& Ivec3Type::
operator= (const Ivec3Type& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

Ivec3Type::
~Ivec3Type ()
{
}

// simulation
//

simulation::
simulation (const cuboids_type& cuboids)
: ::xml_schema::type (),
  metadata_ (this),
  cuboids_ (cuboids, this)
{
}

simulation::
simulation (::std::auto_ptr< cuboids_type > cuboids)
: ::xml_schema::type (),
  metadata_ (this),
  cuboids_ (cuboids, this)
{
}

simulation::
simulation (const simulation& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  metadata_ (x.metadata_, f, this),
  cuboids_ (x.cuboids_, f, this)
{
}

simulation::
simulation (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  metadata_ (this),
  cuboids_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // metadata
    //
    if (n.name () == "metadata" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< metadata_type > r (
        metadata_traits::create (i, f, this));

      if (!this->metadata_)
      {
        this->metadata_.set (r);
        continue;
      }
    }

    // cuboids
    //
    if (n.name () == "cuboids" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboids_type > r (
        cuboids_traits::create (i, f, this));

      if (!cuboids_.present ())
      {
        this->cuboids_.set (r);
        continue;
      }
    }

    break;
  }

  if (!cuboids_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cuboids",
      "");
  }
}

simulation* simulation::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation (*this, f, c);
}

simulation& simulation::
operator= (const simulation& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->metadata_ = x.metadata_;
    this->cuboids_ = x.cuboids_;
  }

  return *this;
}

simulation::
~simulation ()
{
}

// metadata
//

metadata::
metadata ()
: ::xml_schema::type (),
  FileName_ (this),
  delta_t_ (this),
  t_end_ (this)
{
}

metadata::
metadata (const metadata& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  FileName_ (x.FileName_, f, this),
  delta_t_ (x.delta_t_, f, this),
  t_end_ (x.t_end_, f, this)
{
}

metadata::
metadata (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  FileName_ (this),
  delta_t_ (this),
  t_end_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void metadata::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "FileName" && n.namespace_ ().empty ())
    {
      this->FileName_.set (FileName_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      this->delta_t_.set (delta_t_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "t_end" && n.namespace_ ().empty ())
    {
      this->t_end_.set (t_end_traits::create (i, f, this));
      continue;
    }
  }
}

metadata* metadata::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class metadata (*this, f, c);
}

metadata& metadata::
operator= (const metadata& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->FileName_ = x.FileName_;
    this->delta_t_ = x.delta_t_;
    this->t_end_ = x.t_end_;
  }

  return *this;
}

metadata::
~metadata ()
{
}

// cuboids
//

cuboids::
cuboids ()
: ::xml_schema::type (),
  cuboid_ (this)
{
}

cuboids::
cuboids (const cuboids& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cuboid_ (x.cuboid_, f, this)
{
}

cuboids::
cuboids (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cuboid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboids::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (r);
      continue;
    }

    break;
  }
}

cuboids* cuboids::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboids (*this, f, c);
}

cuboids& cuboids::
operator= (const cuboids& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->cuboid_ = x.cuboid_;
  }

  return *this;
}

cuboids::
~cuboids ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::simulation > (
    ::simulation_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::simulation > (
    ::simulation_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::simulation > (
    ::simulation_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, f, p);
}

::std::auto_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::auto_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::auto_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, f, p);
}

::std::auto_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::auto_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::auto_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::simulation > (
    ::simulation_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::simulation > (
    ::simulation_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::simulation > (
    ::simulation_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::simulation > (
      ::simulation_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::auto_ptr< ::simulation >
simulation_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

