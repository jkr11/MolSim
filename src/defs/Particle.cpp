/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include "utils/ArrayUtils.h"
#include "utils/SpdWrapper.h"

Particle::Particle(int type_arg) {
  type = type_arg;
  // DEBUG_PRINT("Particle generated!");
  f = {0., 0., 0.};
  old_f = {0., 0., 0.};
}

Particle::Particle(const Particle &other) {
  x = other.x;
  v = other.v;
  f = other.f;
  old_f = other.old_f;
  m = other.m;
  type = other.type;
  epsilon = other.epsilon;
  sigma = other.sigma;
  // DEBUG_PRINT("Particle generated by copy!");
}

Particle::Particle(const std::array<double, 3> &x_arg,
                   const std::array<double, 3> &v_arg, const double m_arg,
                   const double _epsilon, const double _sigma, int _type) {
  x = x_arg;
  v = v_arg;
  m = 1.0 / (2 * m_arg);
  type = _type;
  f = {0., 0., 0.};
  old_f = {0., 0., 0.};
  sigma = _sigma;
  epsilon = _epsilon;
  // DEBUG_PRINT("Particle generated!");
}

Particle::Particle(const std::array<double, 3> &x_arg,
                   const std::array<double, 3> &v_arg,
                   const std::array<double, 3> &f_arg,
                   const std::array<double, 3> &old_f_arg, const double m_arg,
                   const int type_arg, const double epsilon_arg,
                   const double sigma_arg)
    : x(x_arg),
      v(v_arg),
      f(f_arg),
      old_f(old_f_arg),
      m(1.0 / (2 * m_arg)),
      type(type_arg),
      epsilon(epsilon_arg),
      sigma(sigma_arg) {}

Particle::~Particle() { /*DEBUG_PRINT("Particle destructed!");*/ }

const std::array<double, 3> &Particle::getX() const { return x; }

const std::array<double, 3> &Particle::getV() const { return v; }

const std::array<double, 3> &Particle::getF() const { return f; }

const std::array<double, 3> &Particle::getOldF() const { return old_f; }

double Particle::getM() const { return m; }

int Particle::getType() const { return type; }

double Particle::getEpsilon() const { return epsilon; }

double Particle::getSigma() const { return sigma; }

void Particle::setF(const std::array<double, 3> &F) { f = F; }

void Particle::setV(const std::array<double, 3> &V) { v = V; }

void Particle::setX(const std::array<double, 3> &X) { x = X; }

void Particle::setOldF(const dvec3 &oF) { old_f = oF; }

void Particle::setEpsilon(const double &Epsilon) { epsilon = Epsilon; }

void Particle::setSigma(const double &Sigma) { sigma = Sigma; }

void Particle::addV(const dvec3 &V) { v = v + V; }

void Particle::subV(const dvec3 &V) { v = v - V; }

void Particle::mulV(const double &scalar) { v = scalar * v; }

void Particle::addF(const dvec3 &F) { f = f + F; }

void Particle::subF(const dvec3 &F) { f = f - F; }

void Particle::updateForceInTime() {
  old_f = f;
  f = {0., 0., 0.};
}

void Particle::updateX(const double &delta_t) {
  const double delta_t_sq_over_2m = delta_t * delta_t * m;
  x = x + delta_t * v + delta_t_sq_over_2m * (f);
  // x = new_x;
}

void Particle::updateV(const double &delta_t) {
  v = v + (delta_t * m * (old_f + f));
  // v = new_v;
}

std::string Particle::toString() const {
  std::stringstream stream;
  stream << "Particle: X:" << x << " v: " << v << " f: " << f
         << " old_f: " << old_f << " type: " << type;
  return stream.str();
}

bool Particle::operator==(const Particle &other) const {
  return (x == other.x) and (v == other.v) and (f == other.f) and
         (type == other.type) and (m == other.m) and (old_f == other.old_f);
}

std::ostream &operator<<(std::ostream &stream, const Particle &p) {
  stream << p.toString();
  return stream;
}
